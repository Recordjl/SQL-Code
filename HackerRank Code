/* Weather Observation Station 9 */
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '^[^aeiou]'



/* Weather Observation Station 17 */
Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780.

SELECT ROUND(LONG_W, 4)
FROM STATION
WHERE LAT_N > 38.7780
ORDER BY LAT_N
LIMIT 1;

/* OR */

select round(LONG_W,4) 
from STATION 
    where LAT_N=(select min(LAT_N) 
    from STATION 
where LAT_N>38.7780);

/* OR */

select round(long_w, 4) 
from station 
group by long_w, lat_n 
having min(lat_n) > 38.7780 
order by lat_n 
limit 1;



/* Population Census */
Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

SELECT SUM(City.Population)
FROM CITY
    INNER JOIN COUNTRY
    ON CITY.countrycode = COUNTRY.code
WHERE Continent = 'Asia'

/* OR */

SELECT SUM(POPULATION) 
FROM CITY 
WHERE COUNTRYCODE 
    IN (SELECT CODE 
        FROM COUNTRY 
        WHERE CONTINENT = 'Asia')
        
        
        
/* The PADS */       
Generate the following two result sets:

1. Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
2. Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupation]s.

SELECT CONCAT(Name, '(', SUBSTRING(Occupation,1,1), ')')
FROM Occupations
ORDER BY Name;

SELECT CONCAT('There are a total of ', COUNT(Occupation), ' ', LOWER(occupation), 's.')
FROM Occupations
GROUP BY Occupation
ORDER BY COUNT(Occupation), Occupation



/* Weather Observation Station 18 */
Consider P1(a , b) and P2(c , d) to be two points on a 2D plane.
•  happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
•  happens to equal the minimum value in Western Longitude (LONG_W in STATION).
•  happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
•  happens to equal the maximum value in Western Longitude (LONG_W in STATION).

Query the Manhattan Distance between points P1 and P2 and round it to a scale of  decimal places.
Input Format

SELECT 
ROUND((ABS(MIN(LAT_N)-MAX(LAT_N))) + (ABS(MIN(LONG_W)-MAX(LONG_W))),4)
FROM STATION



/* Weather Observation Station 19 */
Consider P1(a , c) and P2(b , d) to be two points on a 2D plane where (a , b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c , d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits.

SELECT
TRUNCATE(SQRT(POWER(MAX(LAT_N) - MIN(LAT_N),2) + POWER(MAX(LONG_W) - MIN(LONG_W),2)),4)
FROM STATION

/* OR */

SELECT
TRUNCATE(SQRT(
       POWER(MAX(LAT_N) - MIN(LAT_N),  2) 
    + POWER(MAX(LONG_W) - MIN(LONG_W), 2)
              ), 4)
FROM STATION



/* Binary Tree Nodes */
You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
• Root: If node is root node.
• Leaf: If node is leaf node.
• Inner: If node is neither root nor leaf node.

SELECT CASE
    WHEN P IS NULL THEN CONCAT(N, ' Root')
    WHEN N IN (SELECT DISTINCT P FROM BST) THEN CONCAT(N, ' Inner')
    ELSE CONCAT(N, ' Leaf')
    END
FROM BST
ORDER BY N
